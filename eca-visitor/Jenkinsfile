pipeline {
    environment {
        REGISTRY_NAME = "singhvishab/eca-visitor"
        APP_NAME= "eca-visitor"
     }

    agent any
    tools {
        maven "MAVEN_HOME"
    }
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                withCredentials([string(credentialsId: 'GITHUB_TOKEN_PS', variable: '')]) {
                    git branch: 'main', url: 'https://github.com/vishabsingh09/eca-program.git'
                }
            }
        }
        stage('Build') {
            steps {
                sh "mvn -f $APP_NAME/pom.xml clean install -DskipTests"
            }
        }

         stage('Test & Code Coverage') {
            steps {
                sh "mvn -f $APP_NAME/pom.xml -Dmaven.test.failure.ignore=true clean package"
            }
             post {
                success {
                     archiveArtifacts "$APP_NAME/target/*.jar"
                     junit "$APP_NAME/target/surefire-reports/*.xml"
                     jacoco execPattern: "$APP_NAME/target/jacoco.exec"
                     recordCoverage(tools:
                             [[parser: 'JACOCO']],
                             id: 'jacoco', name: 'JaCoCo Coverage',
                             sourceCodeRetention: 'EVERY_BUILD'
                     )
                }
            }
        }

        stage('build && SonarQube analysis') {
            steps {
                script {
                          SonarQubeHome = tool 'SonarQube Scanner 4.8'
                        }
               withSonarQubeEnv(credentialsId: 'SONAR_ECA_VISITOR') {
                    withMaven(maven: 'MAVEN_HOME', traceability: true) {
                        sh 'mvn verify sonar:sonar'
                    }
               }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }


        stage('Building image') {
          steps{
            sh 'docker build -t $REGISTRY_NAME:$BUILD_NUMBER ./eca-visitor'
          }
        }

        stage('Docker Build & Push') {
            steps {
                withDockerRegistry(credentialsId: 'DOCKER_HUB_USER_PS', url: '') {
                    sh 'docker push $REGISTRY_NAME:$BUILD_NUMBER'
                }
            }
            post {
                success {
                    sh 'docker rmi $REGISTRY_NAME:$BUILD_NUMBER'
                }
            }
        }
    }

    post {
       always {
           deleteDir()
       }
   }
}
